
Testen met Jest
Leerdoelen
 [X] Je kan uitleggen wat een automated test is
            Een programma waarmee je kan testen of je code doet wat je verwacht.
 [X] Je kan de voor- en nadelen van automated tests / handmatig testen uitleggen
            Mensen handmatig testen:
                + mensen zijn slim en flexibel
                + mensen kunnen feedback geven over de gebruikservaring
                - duur, want mensen zijn duur
                - testen kan saai werk zijn
                - het handmatig testen neemt veel tijd in beslag.
            Automatisch testen
                - computers zijn dom, ze doen alleen wat je zegt.
                - kunnen alleen zien of het werkt en niet of het er mooi uitziet.
                - duur, want developers moeten de test schrijven.
                + goedkoop, computer voert ze uit dus na het maken goedkoper
                + snel (milliseconden, seconden om te testen)
                + snel & goedkoop betekent dat je vaak kan testen (als je saved bijvoorbeeld)
            Samenvatting
                Automatisch testen schrijven is een investering in de toekomst. In het begin kost het tijd, maar daarna levert het veel op.
                Het komt de stabiliteit op de lange termijn ten goede, omdat het gelijk test of het werkt.
                Handmatig testen wordt hierdoor niet overbodig, want de UX (user experience kun je niet automatisch testen)
            Extra voordelen van automatisch testen
                Als je code goed test kom je er snel achter wanneer je iets per ongeluk stukmaakt.
                Op die manier komt het minder vaak voor dat iets "niet meer werkt" (je voorkomt regressie)
                Heel handig om oefeningen mee te maken / doen wanneer je nog leert te programmeren
 [X] Je weet dat Jest een JavaScript test framework is
            Jest is een framework voor javascript die code kan testen, gemaakt door developers door bibliotheken samentevoegen.
            voordeel: andere developers hebben al allerlei testen voor ons geschreven.
            Jest heeft:
            - functies die je code runnen.
            - functies waarmee je kan checken of je code doet wat je wilt dat je code doet.
            - ingebouwde commandos om je testen uit te voeren (vanuit de terminal).
            - maakt rapportjes met welke testen gelukt zijn en welke niet.
            - en natuurlijk nog veel meer.
 [X] Je weet waar je de documentatie van Jest kan vinden
            https://jestjs.io/docs/en/getting-started
 [X] Je weet hoe je met behulp van Jest automated tests kan opzetten
            1: typ in de terminal: npm init
            2: beantwoord de vragen
            3: bij is this ok controleer je of alle invoervelden kloppen. Zo ja typ yes.
               Er wordt een package.json file aangemaakt.
            4: Voeg jest toe aan je project door in de terminal te typen: npm install -D jest
               Alle informatie wordt toegevoegd aan je package.json file.
               ( "devDevendencies": {"jest": "^^26.6.3"}     DIT geeft aan dat dit project afhankelijk is van een framework namelijk jest.
               Er is nu ook een map node_modules aangemaakt met alle libraries van JEST er in.
            5: Maak een repository aan
                - git init
                - Maak een nieuwe file aan .gitignore en voeg node_modules toe. Want die wil je niet meenemen in het bijhouden.
                - git add .
                - git commit -m "install jest"
            6: Maak een js-bestandje aan en noem deze index.test.js of index.spec.js of zet ze in een map genaamd __tests__
            7: Schrijf je test:
                - in jest zit een functie om je code te testen en die heet test. typ test
                - test verwacht 2 argumenten: test ("beschrijving", function(){})
                        OF
                            test("beschrijving", () => {})
            8: test of het werkt door console log toe te voegen:
                test("even kijken of dit werkt", () => {
                console.log("Hallo")
                })
                typ in de terminal om te testen: npx jest
            9: je kunt jest ook instellen dat hij bij elke save (wijziging) de code test, zoals nodemon
                typ hiervoor in de terminal: npx jest --watch
            10: je kunt bij package.json aangeven wat de testcode hiervan was onder parent scripts en child test.
                er staat nu:                echo "Error: no test specified" && exit 1.
                dit vervang je dan voor:    npx jest
                je kunt ook daaronder nog test.watch toevoegen door:
                        "test:watch": "npx jest --watch"
                je collega kan nu zien hoe jij getest hebt en hoe hij kan testen. door bijvoorbeeld: npm run test:watch

                De stappen aan het eind van de les:
                1.  npm init
                2.  npm install -D jest
                3.  (optioneel) git init -> node_modules in een .gitignore
                4.  Maak een bestandje met .test.js als extensie
                5.  Dan schrijf je een test functie (voorbeeld)
                6.  npx jest om de testen te runnen
                7.  (optioneel) Voeg scripts toe aan je package.json
                8.  npx jest --watch -> runnen de testen bij een verandering
                9.  CTRL + C om de testen te stoppen in de terminal
            13: even committen (git add .   ;   git commit -m "opzetten jest-project"

 De test schrijven met de volgende drie onderdelen:
 [X] Je kan in een test 3 delen onderscheiden
    [X] Arrange (klaarzetten)
    [X] Act (handelen)
    [X] Assert (beweringen)

            1. Voeg de drie onderdelen toe in je test document met // ervoor. (rein doet all CAPS)
            2. bedenk een testbeschrijving: bijvoorbeeld "add function should return the sum of 2 numbers"
            3. Voor de test uit stap 2 moeten wij de 2 nummers klaarzetten. Dit doen wij in het ARRANGE gebied met const
            4. nu gaan wij handelen in het ACT gebied. voor het huidige voorbeeld doen we const sum = add(number 1, number 2)
            5. Nu vullen we nog assert in met onze verwachting. Dit doen wij met expect(sum).toBe(9)
        expect en toBe komen uit jest!
            6. Nu kijkt Rein of de test al slaagt. Deze slaagt niet.
        jest laat weten dat er een referenceError is. add is not defined. De functie bestaat nog niet.
        (door eerst de test te doen krijg je een testdrivendevelopment, het kan ook andersom)
            7. Schrijf de functie (boven test):
                function add(){
                }
            Er is nog steeds een error (geen refference error). Nu krijgen we undefined, omdat de functie wel bestaat, maar nog niks doet.
                function add(number1, number2) {
                    console.log("INPUT", number1, number2);
                }
            Nu faalt de test nog steeds, maar we zien wel dat de nummers doorkomen
                function add(number1, number2) {
                    console.log("INPUT", number1, number2);
                    const sum = number1 + number2;
                    console.log("SUM", sum);
                }
            Nu faalt de test nog steeds, want de uitkomst wordt nog niet return gedaan.
                function add(number1, number2) {
                    console.log("INPUT", number1, number2);
                    const sum = number1 + number2;
                    console.log("SUM", sum);
                    return sum
                    }
        De uitkomst van de console.logs staan onder de test en boven het resultaat van de test.
            8. Zet de automatische testing uit als je deze aan had staan.
                Maak de console.logs in tekstvariant
                en commit je werk.

 [ ] Je weet hoe je de Jest expect functie kan gebruiken
 [ ] Je weet hoe je je code los kan koppelen van het test bestand
 [ ] Je weet het verschil tussen Unit, Integration en End to End tests


Verwerkings Opdracht voor Jest
Maak een programmeer oefening voor een ander!
 [ ]  Bedenk zelf een functie en schrijf die in index.js
 [ ]  Exporteer hem uit index.js en importeer hem in index.test.js
 [ ]  Voeg jest test(s) toe in index.test.js die de functie test
 [ ]  Maak een commit
 [ ]  Voeg een git repo toe aan je project
 [ ]  Push je main branch
 [ ]  Switch naar een branch "solutions"
 [ ]  Push je solutions branch
 [ ]  Switch naar de main branch
 [ ]  Verwijder je oplossing (zodat iemand je test kan oplossen)
 [ ]  Push nogmaals naar de main branch

Wil je een oefening maken?
 [ ] 1 Clone de repo
 [ ] 2 cd <reponaam>
 [ ] 3 run npm install
 [ ] 4 run npx jest --watch om de testen te starten
 [ ] 5 los de oefening op!